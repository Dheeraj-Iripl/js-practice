{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Cambria Math;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.22000}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 * Variable declaration:-\par
\par
  -Variables are containers for storing data (storing data values).\par
   var, let, const\par
 - Always declare JavaScript variables with var,let, or const.\par
\par
 - The var keyword is used in all JavaScript code from 1995 to 2015.\par
\par
 - The let and const keywords were added to JavaScript in 2015.\par
\par
If you want your code to run in older browser, you must use var.\par
\par
Sample snippet for variable declaration:\par
     \par
var name='jagan';\par
let age=21;\par
const gender='male';\par
console.log(name);//jagan\par
console.log(age);//21\par
console.log(gender);//male\par
\par
\par
-------------------------------------------------------*Object*---------------------------------------------------\par
 JavaScript object is a non-primitive data-type that allows you to store multiple collections of data.\par
\par
-Object creation:-\par
// object\par
const student = \{\par
    firstName: 'ram',\par
    class: 10\par
\};\par
\par
const person = \{\par
    firstName: 'John',\par
    lastName: 'Doe'\par
\};\par
\par
\par
// using spread ...\par
let p1 = \{\par
    ...person\par
\};\par
//Object.assign & spread\par
\par
\par
let details = \{\par
        name: "jagan",\par
        age:21,\par
        sex:\{\par
            type1:'male',\par
            type2:'female'\par
        \}\par
    \}\par
    \par
    let d1 = \{\par
        ...details\par
    \};\par
    let d2 =Object.assign(\{\},details);\par
    \par
    console.log(details.sex.type2);//female\par
    \par
    console.log(d1);// \{name: "jagan",age:21,sex:\{type1:'male',type2:'female'\}\}\par
    console.log(d2);// \{name: "jagan",age:21,sex:\{type1:'male',type2:'female'\}\}\par
\par
-Nested objects :\par
\par
// nested object\par
const student = \{ \par
    name: 'John', \par
    age: 20,\par
    marks: \{\par
        science: 70,\par
        math: 75\par
    \}\par
\}\par
\par
// accessing property of student object\par
console.log(student.marks); // \{science: 70, math: 75\}\par
\par
// accessing property of marks object\par
console.log(student.marks.science); // 70\par
\par
-Override a key\par
\par
\par
---------------code for create() method, assign() method and spread operator in Object-------------------------------\par
let details = \{\par
    name: "jagan",\par
    age:21,\par
    gender:'male'\par
\}\par
\par
let info = Object.create(details);\par
info.name = 'Sai Pallavi';\par
info.age = 22;\par
info.gender = 'female';\par
//spread for details object\par
let d1 = \{\par
    ...details\par
\};\par
//assign for details object\par
let d2 =Object.assign(\{\},details);\par
//spread operator for info object\par
let I1 = \{\par
    ...info\par
\}\par
//assign for info operator\par
let I2=Object.assign(\{\},info)\par
\par
console.log(details);\par
console.log(d1);\par
console.log(d2);\par
console.log(info);\par
console.log(I1);\par
console.log(I2);\par
\par
//Output:\par
\{ name: 'jagan', age: 21, gender: 'male' \}\par
\{ name: 'jagan', age: 21, gender: 'male' \}\par
\{ name: 'jagan', age: 21, gender: 'male' \}\par
\{ name: 'Sai Pallavi', age: 22, gender: 'female' \}\par
\{ name: 'Sai Pallavi', age: 22, gender: 'female' \}\par
\{ name: 'Sai Pallavi', age: 22, gender: 'female' \}\par
\par
\par
---------------------------------------------------------------------*Data types*----------------------------------------------------------------\par
\par
->String:A string (or a text string) is a series of characters like "Jagan".\par
\par
-Strings are written with quotes. You can use single or double quotes. \par
\par
  Sample snippet for string datatype\par
\par
   const name="jagan";\par
   console.log(name);//jagan\par
\par
 ->Number:JavaScript has only one type of numbers.\par
\par
 -Numbers can be written with, or without decimals.\par
    \par
Sample snippet for number datatype\par
\par
  let x1 = 34.00;     // Written with decimals\par
  let x2 = 34;        // Written without decimals\par
\par
 Boolean:Booleans can only have two values: true or false.\par
  \par
  Sample snippet for boolean datatype \par
      \par
let x=5;\par
let y=5;\par
let z=10;\par
console.log(x==y);//true\par
console.log(x==z);//false\par
\par
* Typeof operator:Returns the type of a variable\par
 \par
Sample snippet for typeof operator\par
\par
let x=5;\par
const name='jagan';\par
let z;\par
console.log(typeof(x));//number\par
console.log(typeof(name));//string\par
console.log(typeof(z));//undefined\par
\par
\par
* Operators\par
 \par
-Logical operators:\par
\par
Operator\tab Description\par
&&\tab       logical and\par
||\tab       logical or\par
!\tab       logical not\par
 \par
Sample code for logical and :\par
\par
let age=17;\par
if(age<18&&age>16)\par
console.log("Teenage");  //output:teenage\par
\par
Sample code for logical or :\par
\par
let age=18;\par
if(age==18||age<22)\par
console.log("Adult");  //output:Adult\par
\par
Sample code for logical not :\par
\par
let age=16;\par
if(age!=18)\par
console.log("Minor");  //output:Minor\par
\par
-Ternary operator:JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.\par
\par
- Syntax:variablename = (condition) ? value1:value2 \par
\par
Sample code for ternary operator :\par
\par
let age = 15;\par
let result =(age >= 18) ? "You are eligible to vote." : "You are not eligible to vote yet";\par
console.log(result);// You are not eligible to vote yet\par
\par
-Rest operator:The rest operator is used to put the rest of some specific user-supplied values into a JavaScript array.\par
\par
 Sample code for rest operator:\par
  \par
 function showName(firstName, lastName, ...titles) \{\par
  alert( firstName + ' ' + lastName ); // Julius Caesar\par
\par
  // the rest go into titles array\par
  // i.e. titles = ["Consul", "Imperator"]\par
  alert( titles[0] ); // Consul\par
  alert( titles[1] ); // Imperator\par
  alert( titles.length ); // 2\par
\}\par
\par
showName("Julius", "Caesar", "Consul", "Imperator");\par
\par
Note: The rest parameter have to be the last argument, as its job is to collect all the remaining arguments into an array.\par
 So having a function definition like the code below doesn\rquote t make any sense and will throw an error. \par
\par
spread operator: The spread operator (...) helps you expand iterables into individual elements.\par
\par
Sample code for spread operator:\par
\par
const myName = ["Sofela", "is", "my"];\par
const aboutMe = ["Oluwatobi", ...myName, "name."];\par
\par
console.log(aboutMe);\par
\par
// The invocation above will return:\par
[ "Oluwatobi", "Sofela", "is", "my", "name." ]\par
\par
\par
*Difference between spread and rest operators:\par
\par
>The main difference between rest and spread is that the rest operator puts the rest of some specific user-supplied values into a JavaScript array.\par
But the spread syntax expands iterables into individual elements.\par
\par
------------------------------------------------------------------*Functions*-------------------------------------------------------------------------\par
:A JavaScript function is a block of code designed to perform a particular task.\par
\par
            A JavaScript function is executed when "something" invokes it (calls it).\par
\par
 Sample code function declaration:\par
\par
<html>\par
<body>\par
<script>  \par
function msg()\{  \par
alert("hello! this is message");  \par
\}  \par
</script>  \par
<input type="button" onclick="msg()" value="call function"/>  \par
</body>\par
</html>\par
\par
-JavaScript Function Arguments:We can call function by passing arguments. Let\rquote s see the example of function that has one argument.\par
\par
<html>\par
<body>\par
<script>  \par
function getcube(number)\{  \par
alert(number*number*number);  \par
\}  \par
</script>  \par
<form>  \par
<input type="button" value="click" onclick="getcube(4)"/>  \par
</form>  \par
</body>\par
</html>\par
\par
\par
-Function with Return value:We can call function that returns a value and use it in our program. Let\rquote s see the example of function that returns value.\par
\par
\par
<html>\par
<body>\par
<script>  \par
function getInfo()\{  \par
return "hello javatpoint! How r u?";  \par
\}  \par
</script>  \par
<script>  \par
document.write(getInfo());  \par
</script>  \par
</body>\par
</html>\par
\par
 \par
-JavaScript with Function object:In JavaScript, the purpose of Function constructor is to create a new Function object. It executes the code globally.\par
                                 However, if we call the constructor directly, a function is created dynamically but in an unsecured way.\par
\par
 Syntax: new Function ([arg1[, arg2[, ....argn]],] functionBody)  \par
\par
 \par
 \par
<!DOCTYPE html>\par
<html>\par
<body>\par
\par
<script>\par
var add=new Function("num1","num2","return num1+num2");\par
document.writeln(add(2,5));\par
</script>\par
\par
</body>\par
</html>\par
\par
 \par
 \par
\par
Arrow functions, function currying \par
-------------------------------------------------------------*Arrays*-------------------------------------------------------------------------\par
:The Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, \par
 and has members for performing common array operations.\par
\par
Create an array:\par
\par
let movie=['director','producer','hero','music'];\par
 \par
-push (): Add items to the end of an array\par
\par
let movie=['director','producer','hero','music'];\par
movie.push('script');\par
console.log(movie);//[ 'director', 'producer', 'hero', 'music', 'script' ]\par
\par
-pop():Remove an item from the end of an array\par
let movie=['director','producer','hero','music'];\par
movie.pop('script');\par
console.log(movie);//[ 'director', 'producer', 'hero' ]\par
\par
\par
\par
-slice():The slice() method extracts a section of a string and returns it as a new string, without modifying the original string.\par
\par
const str = 'Jagan Mohan ';\par
\par
console.log(str.slice(3));//  " an Mohan"\par
\par
\par
console.log(str.slice(4, 9));// "n Moh"\par
\par
console.log(str.slice(-4));// "han"\par
\par
console.log(str.slice(-9, -5));// "an M"\par
\par
\par
\par
-concat():The concat() method concatenates the string arguments to the calling string and returns a new string.\par
\par
let greet = 'Hello'\par
let firstName = 'Jack';\par
let lastName = 'Rose';\par
let fullName = greet.concat(" ",firstName," & " ,lastName);\par
console.log(fullName);   \par
\par
let hello = 'Hello, '\par
console.log(hello.concat('Kevin', '. Have a nice day.'))\par
// Hello, Kevin. Have a nice day.\par
\par
let greetList = ['Hello', ' ', 'Venkat', '!']\par
"".concat(...greetList)  // "Hello Venkat!"\par
\par
console.log(hello.concat(\{\}));  // [object Object]\par
console.log(firstName.concat([]));  // ""\par
"".concat(null)  // "null"\par
"".concat(true)  // "true"\par
"".concat(4, 5)  // "45"\par
\par
\par
\par
\par
\par
-filter():The filter() method creates a new array with all elements that pass the test implemented by the provided function.\par
\par
1.\par
const array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\par
\par
function isPrime(num) \{\par
  for (let i = 2; num > i; i++) \{\par
    if (num % i == 0) \{\par
      return false;\par
    \}\par
  \}\par
  return num > 1;\par
\}\par
\par
console.log(array.filter(isPrime)); // [2, 3, 5, 7, 11, 13]\par
\par
\par
2.\par
\par
const ages = [32, 33, 16, 40];\par
const result = ages.filter(checkAdult);\par
\par
function checkAdult(age) \{\par
  return age >= 18;\par
\}\par
console.log(result);// [32,33,40]\par
\par
\par
-map():\par
>map() creates a new array from calling a function for every array element.\par
\par
>map() calls a function once for each element in an array.\par
\par
>map() does not execute the function for empty elements.\par
\par
>map() does not change the original array.\par
\par
\par
const num =[10,2,24];\par
\par
    const result = num.map(multiplyByTen);\par
\par
    function multiplyByTen(num) \{\par
\par
    return num*10;\par
    \}\par
    console.log(result);// [100,20,240]'\par
\par
\par
\par
-reduce():The reduce() method executes a user-supplied "reducer" callback function on each element of the array, in order,\par
 passing in the return value from the calculation on the preceding element.\par
 The final result of running the reducer across all elements of the array is a single value.\par
\par
const array1 = [1, 2, 3, 4];\par
\par
// 0 + 1 + 2 + 3 + 4\par
const initialValue = 0;\par
const sumWithInitial = array1.reduce(\par
  (previousValue, currentValue) => previousValue + currentValue,\par
  initialValue\par
);\par
\par
console.log(sumWithInitial);\par
// expected output: 10\par
\par
\par
\par
\par
---------------------------------------------------------------Scope--------------------------------------------------\par
\par
\f1\u8674?\f0  Scope in JavaScript determines the accessibility (where a variable can be used) of variables in JavaScript.\par
\par
\par
-Global scope:\par
\f1\u8674?\f0  Global scope means if a variable is declared outside any curly brackets that variable has a global scope and can be used anywhere in the file. \par
  \par
let a = "hey"\par
\par
function greet()\{\par
console.log(a);\par
\}\par
greet();//hey\par
\par
\par
-Function scope:\par
\par
\f1\u8674?\f0  In Function Scope variables defined inside a function are not accessible from outside the function.\par
\par
function myFunction() \{\par
  const carName = "Volvo";   // Function Scope\par
\}\par
\par
\par
-Block scope:\par
\par
>Before ES6 (2015), JavaScript had only Global Scope and Function Scope.\par
\par
>ES6 introduced two important new JavaScript keywords: let and const.\par
\par
>These two keywords provide Block Scope in JavaScript.\par
\par
>Variables declared inside a \{ \} block cannot be accessed from outside the block:\par
\par
>Variables declared with the var keyword can NOT have block scope.\par
\par
>Variables declared inside a \{ \} block can be accessed from outside the block.\par
\par
function displayName()\{\par
\par
let name ="jagan";\par
// name can be used here\par
\}\par
// name can't be used here\par
\par
-------------------------------------------------------------------------This keyword----------------------------------------------------------------------\par
\par
\par
-------------------------------------------------------------------------Add & Remove attributes---------------------------------------------------------------------\par
>Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified \par
 name and value.\par
\par
>To get the current value of an attribute, use getAttribute(); to remove an attribute, call removeAttribute().\par
\par
...HTML CODE...\par
\par
<!DOCTYPE html>\par
<html lang="en">\par
<head>\par
    <meta charset="UTF-8">\par
    <meta http-equiv="X-UA-Compatible" content="IE=edge">\par
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\par
    <link rel="stylesheet" href="test.css"> \par
    <title>Document</title>\par
</head>\par
<body>\par
    <div>\par
        <button id = "add">Add</button>\par
        <button id = "remove">Remove</button>\par
        <input type = "text">\par
    </div>\par
    <script src = "test.js"></script>\par
</body>\par
</html>\par
\par
...CSS CODE...\par
\par
div\{\par
    text-align: center;\par
\}\par
button\{\par
    display: inline-block;\par
    padding: 10px 20px;\par
\}\par
\par
input\{\par
    display: block;\par
    padding: 10px 20px;\par
    margin: 10px auto;\par
\}\par
\par
...JS CODE...\par
\par
let btnAdd = document.querySelector('#add');\par
let btnRemove = document.querySelector('#remove');\par
let input = document.querySelector('input');\par
\par
btnAdd.addEventListener('click', () =>\{\par
    input.setAttribute('readonly',true);\par
\});\par
\par
\par
btnRemove.addEventListener('click', () =>\{\par
\par
    input.removeAttribute('readonly');\par
\});\par
\par
\par
Extent an object \par
Object iteration \par
Clone objects\par
Copy objects \par
Prototyping \par
Prototype attribute, chaining\par
---------------------------------------------------------------------------Closures-------------------------------------------------------------------------\par
-JavaScript Closures\par
\par
In JavaScript, closure provides access to the outer scope of a function from inside the inner function, even after the outer function has closed. \par
\par
\par
\par
    function greet()\{\par
\par
        let name = 'jagan';\par
\par
        function displayName()\par
        \{\par
            return 'Hi' +" "+name;\par
        \}\par
        return displayName;\par
    \}\par
\par
    const g1 = greet();\par
    console.log(g1);// [Function: displayName]\par
    console.log(g1());// Hi jagan \par
\par
\par
\par
\par
Classes \par
Create a class\par
Constructor \par
Add method \par
Create instance and access the method\par
Module.exports \par
\par
\par
For your reference - I\rquote ve prepared my own notes for each concepts, you can take a look if you want.\par
  {{\field{\*\fldinst{HYPERLINK https://github.com/ashok-kumar/js-sources/blob/master/js-concepts.md }}{\fldrslt{https://github.com/ashok-kumar/js-sources/blob/master/js-concepts.md\ul0\cf0}}}}\f0\fs22\lang9\par
}
 